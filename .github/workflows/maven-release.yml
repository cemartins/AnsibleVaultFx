name: Release

on: [workflow_dispatch]

jobs:

  release_prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Configure git
        run: |
          git config --global committer.email "noreply@github.com"
          git config --global committer.name "GitHub"
          git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global author.name "${GITHUB_ACTOR}"
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Prepare release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn --batch-mode release:prepare -Dusername=$GITHUB_ACTOR -Dpassword=$GITHUB_TOKEN
      - name: Search for properties
        run: echo "${GITHUB_WORKSPACE}" && find ${GITHUB_WORKSPACE} -name "release.properties" -print -exec cat -n {} \;
      - name: Upload relese properties
        uses: actions/upload-artifact@v2
        with:
          name: release-properties
          path: /home/runner/work/AnsibleVaultFx/AnsibleVaultFx/release.properties

  perform_macos:
    runs-on: macos-latest
    needs: release_prepare
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Configure git
        run: |
          git config --global committer.email "noreply@github.com"
          git config --global committer.name "GitHub"
          git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global author.name "${GITHUB_ACTOR}"
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Download release properties
        uses: actions/download-artifact@v2
        with:
          name: release-properties
      - name: List workspace dir
        run: ls -l ${GITHUB_WORKSPACE}
      - name: Search for properties
        run: echo "${GITHUB_WORKSPACE}" && find ${GITHUB_WORKSPACE} -name "release.properties" -exec cat -n {} \;
      - name: Extract SCM TAG
        run: grep "scm.tag=" ${GITHUB_WORKSPACE}/release.properties | cut -d '=' -f2 | awk '{print "SCM_TAG=" $0}' >> $GITHUB_ENV
      - name: Extract release number
        run: echo ${{ env.SCM_TAG }} | cut -c2- | awk '{print "RELEASE_VERSION=" $0}' >> $GITHUB_ENV
      - name: Print Release Properties
        run: |
          echo "SCM TAG = ${{ env.SCM_TAG }}"
          echo "Version = ${{ env.RELEASE_VERSION }}"
      - name: Perform release for MacOs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn --batch-mode -Darguments="-Dmaven.javadoc.skip=true" release:perform -Dusername=$GITHUB_ACTOR -Dpassword=$GITHUB_TOKEN
      - name: Stage release
        run: mkdir staging && cp target/checkout/target/AnsibleVaultFX*.dmg ${GITHUB_WORKSPACE}/staging
      - name: List staging dir
        run: ls -ltr ${GITHUB_WORKSPACE}/staging
      - name: List workspace and current dir
        run: ls -ltr ${GITHUB_WORKSPACE} && pwd && ls -ltr
      - name: Upload MacOs bundle
        uses: actions/upload-artifact@v2
        with:
          name: macos-app
          path: ${GITHUB_WORKSPACE}/staging/AnsibleVaultFX_${{ env.RELEASE_VERSION }}.dmg
  perform_linux:
    runs-on: ubuntu-latest
    needs: release_prepare
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Configure git
        run: |
          git config --global committer.email "noreply@github.com"
          git config --global committer.name "GitHub"
          git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global author.name "${GITHUB_ACTOR}"
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Download release properties
        uses: actions/download-artifact@v2
        with:
          name: release-properties
      - name: Search for properties
        run: echo "${GITHUB_WORKSPACE}" && find ${GITHUB_WORKSPACE} -name "release.properties" -print
      - name : Perform release for Linux
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn --batch-mode -Darguments="-Dmaven.javadoc.skip=true" release:perform -Dusername=$GITHUB_ACTOR -Dpassword=$GITHUB_TOKEN
      - name: List binaries
        run: ls -ltr ${GITHUB_WORKSPACE}/target/checkout/target
      - name: Stage release
        run: mkdir staging && cp target/checkout/target/*linux.jar ${GITHUB_WORKSPACE}/staging
      - name: List staging dir
        run: ls -ltr ${GITHUB_WORKSPACE}/staging
      - name: Upload Linux bundle
        uses: actions/upload-artifact@v2
        with:
          name: linux-app
          path: ${GITHUB_WORKSPACE}/staging/*linux.jar
  perform_windows:
    runs-on: windows-latest
    needs: release_prepare
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Download release properties
        uses: actions/download-artifact@v2
        with:
          name: release-properties
      - name: Perform release for Windows
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: mvn --batch-mode -Darguments="-Dmaven.javadoc.skip=true" release:perform -Dusername=$GITHUB_ACTOR -Dpassword=$GITHUB_TOKEN
      - name: Stage release
        run: mkdir staging && copy target\checkout\target\*win.jar staging
      - name: Upload Linux bundle
        uses: actions/upload-artifact@v2
        with:
          name: windows-app
          path: ${GITHUB_WORKSPACE}/staging/*win.jar
  release_publish:
    runs-on: ubuntu-latest
    needs:
      - perform_macos
      - perform_linux
      - perform_windows
    steps:
      - name: Download MacOs App
        uses: actions/download-artifact@v2
        with:
          name: macos-app
      - name: Download Linux App
        uses: actions/download-artifact@v2
        with:
          name: linux-app
      - name: Download Windows App
        uses: actions/download-artifact@v2
        with:
          name: windows-app
      - name: List workspace and current dir
        run: ls -ltr ${GITHUB_WORKSPACE} && pwd && ls -ltr
      - name: Print release information
        run: echo ${{ github.ref }}
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            macos-app
            linux-app
            windows-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}